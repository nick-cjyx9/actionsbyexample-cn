# 正如我们在[Parallel Jobs](parallel-jobs.html)一章中说的，jobs默认地平行运行。
# 你也可以使用`needs`关键词指定运行顺序。

name: parallel-jobs
on:
  push:

jobs:
  job1:
    runs-on: ubuntu-latest
    steps:
      - run: echo "与job2平行运行"
  job2:
    runs-on: ubuntu-latest
    steps:
      - run: echo "与job1平行运行"
  job3:
    runs-on: ubuntu-latest
    # `job3`运行的前提是`job1`成功运行
    needs: job1
    steps:
      - run: echo "job1 完成了再运行 job3"
  # `job4`运行的前提是 `job2` 和 `job3` 成功运行
  job4:
    runs-on: ubuntu-latest
    needs: [job2, job3]
    steps:
      - run: echo "job2 & job3 完成了再运行 job4"
  job5:
    runs-on: ubuntu-latest
    # ::span-comment
    # 这个job会在`job1`之后运行，尽管`job1`运行失败（参见[Context Variables](context-variables.html)）
    if: ${{ always() }}
    needs: job1
    # ::end-span
    steps:
      - run: echo "job1 运行完了，状态：${{ needs.job1.result }}, 现在运行 job5"
    
